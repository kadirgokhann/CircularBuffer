# Circular Buffer Project

This project implements a **Circular Buffer** in C++. It includes header and template implementation files for creating and managing a circular buffer data structure, as well as a sample `main.cpp` to demonstrate how to use the buffer.

## Files

- `CircBuffer.hpp`: Header file containing the declaration of the Circular Buffer class.
- `CircBuffer.tpp`: Template file containing the implementation of the Circular Buffer methods.
- `main.cpp`: Example usage of the Circular Buffer in a C++ program.
- `README`: Documentation file explaining the structure of the project and how to use the Circular Buffer.

## Features

- Efficient insertion and retrieval of elements in a circular fashion.
- Simple API with functions like `Put`, `Get`, and `PrintState`.
- Template-based implementation, allowing flexibility for different data types.

## Usage

To use the Circular Buffer, include both the `CircBuffer.hpp` and `CircBuffer.tpp` files in your project. You can then create a buffer, insert elements, retrieve them, and print the current state of the buffer.

### Example

```cpp
#include "CircBuffer.hpp"

int main() {
    // Create a circular buffer for integers with size 5
    CircularBuffer<int> buffer(5);

    // Add some elements
    buffer.Put(10);
    buffer.Put(20);
    buffer.Put(30);

    // Retrieve an element
    int value = buffer.Get();

    // Print the current state of the buffer
    buffer.PrintState();

    return 0;
}

g++ -o CircularBuffer main.cpp
